#!/usr/bin/env bash

set -euo pipefail

echo "DEBUG: env"
env
echo "END DEBUG"

# This script exports some environment variables for later steps,
# and clones this entire repository into the action path.
#
# When actions are used, the repository itself is not present by
# default, however the repository itself is required by this action
# in order for it to build its own CLI.

#
# Clone the action repository.
#

ACTION_REPO="https://github.com/hashicorp/actions-docker-build"

echo "DEBUG: ACTION_REPO=$ACTION_REPO"

ACTION_PATH="${GITHUB_ACTION_PATH:?}"
ACTION_REF="$(basename "$ACTION_PATH")"

# If the ref is just "." then that means we're referencing the action
# from the self-tests rather than from a remote repo. Therefore the
# action ref is just the same as the current github.sha.
if [[ "$ACTION_REF" == "." ]]; then
	ACTION_REF="$GITHUB_SHA"
	# Strip the /./ from the end of action path.
	ACTION_PATH="${ACTION_PATH%/./}"
fi

echo "DEBUG: ACTION_PATH=$ACTION_PATH"

echo "DEBUG: ACTION_REF=$ACTION_REF"

# Clone the repo if needed.
if [[ ! -d "$ACTION_PATH/.git" ]]; then
	# Go to the directory containing the directory containing the action.
	cd "$ACTION_PATH/.." || exit 1

	# Destroy the action from orbit.
	rm -rf "$ACTION_PATH"
	
	# Clone the action repository.
	git clone --depth 1 --branch "$ACTION_REF" "$ACTION_REPO" "$ACTION_PATH"
fi

#
# Install the CLI
#

cd "$ACTION_PATH" || exit 1

# Ensure that config defined in the usage of this action
# doesn't impact the build of the action's own CLI.
export PRODUCT_REPOSITORY="actions-go-build"
export PRODUCT_NAME="actions-go-build"
export PRODUCT_VERSION_META=
export BIN_NAME="actions-go-build"

$RUN make install

#
# Export environment variables for later steps.
#

{
  echo "TMPDIR=${RUNNER_TEMP:?}"
  echo "RUN=${ACTION_PATH:?}/scripts/gha run"
  echo "RUN_CLI=env DEBUG=true ${ACTION_PATH:?}/scripts/gha run actions-go-build"
} >> "${GITHUB_ENV:?}"
