name: Tests

on: [push]

jobs:

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: github/super-linter@v4

  script-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Install BATS
        env:
          BATS_VERSION: 1.7.0
          BATS_REPO: https://github.com/bats-core/bats-core
          BATS_PATH: /usr/local/bats
        run: |
          sudo git clone --depth 1 --branch "v$BATS_VERSION" "$BATS_REPO" "$BATS_PATH"
          echo "$BATS_PATH/bin" >> "$GITHUB_PATH"
      - uses: actions/checkout@v2
      - name: Run BATS tests
        run: make test

  example-target:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: 1.18
      - uses: actions/checkout@v2
      - run: make example

  # Begin action tests.
  #
  # These tests use a matrix to define a set of inputs and wanted results.
  # They use the ./test action in this repo to exercise the action itself
  # with different sets of inputs, and assert that the action succeeds or
  # fails correctly.

  test-ok-single-file:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - { runner: ubuntu-latest, reproducible: assert, want: success }
          - { runner: ubuntu-latest, reproducible: report, want: success }
          - { runner: ubuntu-latest, reproducible: nope,   want: success }
          - { runner: macos-latest,  reproducible: assert, want: success }
          - { runner: macos-latest,  reproducible: report, want: success }
          - { runner: macos-latest,  reproducible: nope,   want: success }
    steps:
      - uses: actions/checkout@v3
      - uses: ./test
        with:
          reproducible: ${{ matrix.reproducible }}
          assert: ${{ matrix.want }}
          when: "the binary files are identical and there are no other files in the zip"
          instructions: |
            cd testdata/example-app
            go build -trimpath -o "$BIN_PATH"

  test-ok-multi-file:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - { runner: ubuntu-latest, reproducible: assert, want: success }
          - { runner: ubuntu-latest, reproducible: report, want: success }
          - { runner: ubuntu-latest, reproducible: nope,   want: success }
          - { runner: macos-latest,  reproducible: assert, want: success }
          - { runner: macos-latest,  reproducible: report, want: success }
          - { runner: macos-latest,  reproducible: nope,   want: success }
    steps:
      - uses: actions/checkout@v3
      - uses: ./test
        with:
          reproducible: ${{ matrix.reproducible }}
          assert: ${{ matrix.want }}
          when: "the binary files are identical and so are two other files in the zip"
          instructions: |
            cd testdata/example-app
            go build -trimpath -o "$BIN_PATH" .
            echo "Hello world." > "$TARGET_DIR/another-file.txt"
            echo "A fake license." > "$TARGET_DIR/LICENSE"

  test-ok-multi-file-from-curl:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - { runner: ubuntu-latest, reproducible: assert, want: success }
          - { runner: ubuntu-latest, reproducible: report, want: success }
          - { runner: ubuntu-latest, reproducible: nope,   want: success }
          - { runner: macos-latest,  reproducible: assert, want: success }
          - { runner: macos-latest,  reproducible: report, want: success }
          - { runner: macos-latest,  reproducible: nope,   want: success }
    steps:
      - uses: actions/checkout@v3
      - uses: ./test
        with:
          reproducible: ${{ matrix.reproducible }}
          assert: ${{ matrix.want }}
          when: "the binary files are identical and so are two other files downloaded into the zip"
          instructions: |
            cd testdata/example-app
            go build -trimpath -o "$BIN_PATH" .
            curl -o "$TARGET_DIR/EULA.txt" https://eula.hashicorp.com/EULA.txt
            curl -o "$TARGET_DIR/TermsOfEvaluation.txt" https://eula.hashicorp.com/TermsOfEvaluation.txt

  # Test cases where the binary reproduces but the zip file does not.
  test-err-zip-mismatch:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - { runner: ubuntu-latest, reproducible: assert, want: failure }
          - { runner: ubuntu-latest, reproducible: report, want: success }
          - { runner: ubuntu-latest, reproducible: nope,   want: success }
          - { runner: macos-latest,  reproducible: assert, want: failure }
          - { runner: macos-latest,  reproducible: report, want: success }
          - { runner: macos-latest,  reproducible: nope,   want: success }
    steps:
      - uses: actions/checkout@v3
      - uses: ./test
        with:
          reproducible: ${{ matrix.reproducible }}
          assert: ${{ matrix.want }}
          when: "the binary files reproduce but the zip files do not"
          instructions: |
            cd testdata/example-app
            go build -trimpath -o "$BIN_PATH"
            # Insert something random into the zipped dir.
            head -c100 < /dev/urandom > "$TARGET_DIR/random.bytes"

  # Test cases where the binary and zip file both do not reproduce.
  test-err-bin-mismatch:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - { runner: ubuntu-latest, reproducible: assert, want: failure }
          - { runner: ubuntu-latest, reproducible: report, want: success }
          - { runner: ubuntu-latest, reproducible: nope,   want: success }
          - { runner: macos-latest,  reproducible: assert, want: failure }
          - { runner: macos-latest,  reproducible: report, want: success }
          - { runner: macos-latest,  reproducible: nope,   want: success }
    steps:
      - uses: actions/checkout@v3
      - uses: ./test
        with:
          reproducible: ${{ matrix.reproducible }}
          assert: ${{ matrix.want }}
          when: "neither the binary file not the zip file reproduce"
          instructions: |
            cd testdata/example-app
            # Don't use -trimpath so we get different binaries.
            go build -o "$BIN_PATH"

  # Test cases where the binary file is not written to the correct path.
  test-err-bin-missing:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - { runner: ubuntu-latest, reproducible: assert, want: failure }
          - { runner: ubuntu-latest, reproducible: report, want: failure }
          - { runner: ubuntu-latest, reproducible: nope,   want: failure }
          - { runner: macos-latest,  reproducible: assert, want: failure }
          - { runner: macos-latest,  reproducible: report, want: failure }
          - { runner: macos-latest,  reproducible: nope,   want: failure }
    steps:
      - uses: actions/checkout@v3
      - uses: ./test
        with:
          reproducible: ${{ matrix.reproducible }}
          assert: ${{ matrix.want }}
          when: "the binary file is not written to the correct path"
          instructions: |
            cd testdata/example-app
            go build -o "$BIN_PATH.wrong"
