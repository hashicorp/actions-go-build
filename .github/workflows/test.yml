name: Tests

on: [push]

jobs:

  script-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Install BATS
        env:
          BATS_VERSION: 1.7.0
          BATS_REPO: https://github.com/bats-core/bats-core
          BATS_PATH: /usr/local/bats
        run: |
          sudo git clone --depth 1 --branch "v$BATS_VERSION" "$BATS_REPO" "$BATS_PATH"
          echo "$BATS_PATH/bin" >> "$GITHUB_PATH"
      - uses: actions/checkout@v2
      - name: Run BATS tests
        run: make test

  example-target:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: 1.18
      - uses: actions/checkout@v2
      - run: make example

  # Test cases where the binary and zip file are both reproducible.
  test-reproduced-ok:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        assert: [ success ]
        reproducible: [ assert, report, nope ]
        runner: [ ubuntu-latest, macos-latest ]
    steps:
      - uses: actions/checkout@v3
      - uses: ./test
        with:
          reproducible: ${{ matrix.reproducible }}
          assert: ${{ matrix.assert }}
          when: the binary files are identical and the zip files are identical
          instructions: |
            cd testdata/example-app
            go build -trimpath -o "$TARGET_DIR/$BIN_NAME" .

  test-zip-mismatch-assert:
    uses: ./.github/workflows/action-test.yml
    with:
      reproducible: assert
      assert: failure
      when: the zip files are different
      instructions: |
        cd testdata/example-app
        go build -trimpath -o "$TARGET_DIR/$BIN_NAME" .
        # Insert something random into the zipped dir.
        head -c100 < /dev/urandom > "$TARGET_DIR/random.bytes"

  test-bin-mismatch-assert:
    uses: ./.github/workflows/action-test.yml
    with:
      reproducible: assert
      assert: failure
      when: the binary files are different
      instructions: |
        cd testdata/example-app
        # Don't use -trimpath so we get different binaries.
        go build -o "$TARGET_DIR/$BIN_NAME" .

  test-bin-missing-assert:
    uses: ./.github/workflows/action-test.yml
    with:
      reproducible: assert
      assert: failure
      when: the binary file has the wrong name
      instructions: |
        cd testdata/example-app
        go build -o "$TARGET_DIR/$BIN_NAME.wrong" .

  test-zip-mismatch-report:
    uses: ./.github/workflows/action-test.yml
    with:
      reproducible: report
      assert: success
      when: the zip files are different
      instructions: |
        cd testdata/example-app
        go build -trimpath -o "$TARGET_DIR/$BIN_NAME" .
        # Insert something random into the zipped dir.
        head -c100 < /dev/urandom > "$TARGET_DIR/random.bytes"

  test-bin-mismatch-report:
    uses: ./.github/workflows/action-test.yml
    with:
      reproducible: report
      assert: success
      when: the binary files are different
      instructions: |
        cd testdata/example-app
        # Don't use -trimpath so we get different binaries.
        go build -o "$TARGET_DIR/$BIN_NAME" .

  test-bin-missing-report:
    uses: ./.github/workflows/action-test.yml
    with:
      reproducible: assert
      assert: failure
      when: the binary file has the wrong name
      instructions: |
        cd testdata/example-app
        go build -o "$TARGET_DIR/$BIN_NAME.wrong" .

  test-zip-mismatch-nope:
    uses: ./.github/workflows/action-test.yml
    with:
      reproducible: nope
      assert: success
      when: the zip files are different
      instructions: |
        cd testdata/example-app
        go build -trimpath -o "$TARGET_DIR/$BIN_NAME" .
        # Insert something random into the zipped dir.
        head -c100 < /dev/urandom > "$TARGET_DIR/random.bytes"

  test-bin-mismatch-nope:
    uses: ./.github/workflows/action-test.yml
    with:
      reproducible: nope
      assert: success
      when: the binary files are different
      instructions: |
        cd testdata/example-app
        # Don't use -trimpath so we get different binaries.
        go build -o "$TARGET_DIR/$BIN_NAME" .

  test-bin-missing-nope:
    uses: ./.github/workflows/action-test.yml
    with:
      reproducible: assert
      assert: failure
      when: the binary file has the wrong name
      instructions: |
        cd testdata/example-app
        go build -o "$TARGET_DIR/$BIN_NAME.wrong" .
