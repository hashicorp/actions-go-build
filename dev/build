#!/usr/bin/env bash


# build
#
# This script encodes building a releasable actions-go-build CLI.
#
# Relased versions of actions-go-build are always built using themselves.
# The build happens in four stages:
#
# 1. Bootstrap - this build is created using a standard 'go build' invocation.
# 2. Intermediate - built using the bootstrap build. It contains its own version metadata.
# 3. Final - built using the intermediate build. It additionally contains version metadata
#    about the version of actions-go-build that built it. This metadata is also available
#    to the builds produced by end users.
# 4. Verification of reproducibility - the final build is run to verify itself for reproducibility.

# Enable "safe mode"
set -Eeuo pipefail

# Logging functions.
# shellcheck disable=SC2059
log() { local F="$1"; shift; printf "$F\n" "$@" 1>&2; }
die() { local F="FATAL: ${1:-$_emptylog}"; shift; log "$F" "$@"; exit 1; }
err() { local F="ERROR: ${1:-$_emptylog}"; shift; log	"$F" "$@"; echo 1; return 1; }
enabled() { [[ "${!1:-,,}" =~ (1|y|yes|true|enabled) ]]; }
is_debug() { enabled DEBUG; }
is_verbose() { enabled VERBOSE || enabled DEBUG; }
debug()   { is_debug   || return 0; local F="DEBUG: $1"; shift; log "$F" "$@"; }
verbose() { is_verbose || return 0; local F="INFO: $1"; shift; log "$F" "$@"; }
run() {
	# shellcheck disable=SC2001 # using sed not bash find/replace.
	log "\$ $(sed "s,$TMP_ROOT,\$TMP_ROOT,g" <<< "$*")"
	/usr/bin/env "$@"
}

# Header that enables you to run specific functions in this file.
#
# Set exit trap if this file was directly invoked rather than sourced.
# https://stackoverflow.com/questions/2683279/how-to-detect-if-a-script-is-being-sourced
(return 0 2>/dev/null) || trap 'Makefile.funcs.main "$@"' EXIT
Makefile.funcs.main() {
	local CODE=$?; trap - EXIT
	[[ $CODE == 0 ]] || die "Script exited with code $CODE before main func could run."
	[[ ${#@} != 0 ]] || { log "No arguments passed."; exit; }; local FUNC="$1"; shift
	declare -F | cut -d' ' -f3 | grep -qE "^$FUNC\$" || die "Function '%s' not defined." "$FUNC"
	"$FUNC" "$@"
}
#
# End Header

# Define constants.

BIN_NAME=actions-go-build

TMP_ROOT="${TMP_ROOT:-$TMPDIR/$BIN_NAME/build}"

SUPPORTED_PLATFORMS=(
	linux/amd64
	linux/arm64
	darwin/amd64
	darwin/arm64
)

#
# Define defaults for this system.
#

HOST_PLATFORM="$(go env GOHOSTOS)/$(go env GOHOSTARCH)"

#
# Define top-level functions.
#

# all performs a complete build from source code -> bootstrap -> intermediate -> final ->
# verification, and also performs a basic check that the verification build has the
# same SHA as the final build.
all() { local PLATFORM="${1:-$HOST_PLATFORM}" BIN_PATH="${BIN_PATH:-}" BOOTSTRAP INTERMEDIATE FINAL
	# Build bootstrap and intermediate for the host platform always as we need
	# to execute them here. Always build them to their default path, not the specified BIN_PATH,
	# as we reserve that for the final build.
	BOOTSTRAP="$(BIN_PATH="" bootstrap)" || return 
	INTERMEDIATE="$(BIN_PATH="" intermediate "$BOOTSTRAP")" || return 1
	FINAL_HOST_RESULT="$(tmpfile "final/$HOST_PLATFORM/result.json")"
	FINAL_HOST="$(final "$INTERMEDIATE" "$FINAL_HOST_RESULT" "$HOST_PLATFORM")" || return 1
	# Build the final build according to the requested platform.
	if [[ "$PLATFORM" == "$HOST_PLATFORM" ]]; then
		FINAL="$FINAL_HOST"
		RESULT="$FINAL_HOST_RESULT"
	else
		RESULT="$(tmpfile "final/$PLATFORM/result.json")"
		FINAL="$(final "$FINAL_HOST" "$RESULT" "$PLATFORM")" || return 1
	fi
	# Verify the final build.
	VERIFICATION="$(BIN_PATH="" verify "$FINAL_HOST" "$RESULT")" || return 1
	F_SHA="$(sha "$FINAL")" || return 1
	V_SHA="$(sha "$VERIFICATION")" || return 1
	[[ "$F_SHA" == "$V_SHA" ]] || {
		log "FINAL:        %s" "$FINAL"
		log "VERIFICATION: %s" "$VERIFICATION"
		return "$(err "SHA mismatch:\n  FINAL:        %s\n  VERIFICATION: %s" "$F_SHA" "$V_SHA")"
	}
	log "Success; binary written to $FINAL"
}

# bootstrap produces a bootstrap build at BIN_PATH, or a default path,
# and prints the path of the built binary.
bootstrap() { local BIN_PATH="${BIN_PATH:-}" RESULT="${2:-}"
	_build bootstrap "$HOST_PLATFORM" _go_build
}

# intermediate produces an intermediate build given a bootstrap build.
intermediate() { local BOOTSTRAP="$1" RESULT="${2:-/dev/null}" BIN_PATH="${BIN_PATH:-}"
	_build intermediate "$HOST_PLATFORM" _self_build "$BOOTSTRAP" "$RESULT"
}

# final produces a final build given an intermediate build.
final() { local INTERMEDIATE="$1" RESULT="$2" PLATFORM="${3:-$HOST_PLATFORM}"
	_build final "$PLATFORM" _self_build "$INTERMEDIATE" "$RESULT"
}

verify() { local FINAL="$1" RESULT_IN="$2" RESULT_OUT="${3:-}"
	run "$FINAL" verify -q "$RESULT_IN"
}

#
# Define utility functions.
#

# _build performs a build and outputs the absolute path to the built binary.
_build() { local TYPE="$1" PLATFORM="$2" BIN_PATH="${BIN_PATH:-}"; shift 2
	verbose "TMP_ROOT=$TMP_ROOT"
	assert_supported_platform "$PLATFORM"
	OS="$(cut -d'/' -f1 <<< "$PLATFORM")" || return 1
	ARCH="$(cut -d'/' -f2 <<< "$PLATFORM")" || return 1
	BIN_PATH="$(get_bin_path "$TYPE" "$PLATFORM")" || return 1
	log "Building %s %s/%s binary..." "$TYPE" "$OS" "$ARCH"
	OS="$OS" ARCH="$ARCH" BIN_PATH="$BIN_PATH" "$@" || return 1
	[[ -f "$BIN_PATH" ]] || return "$(err "Binary file not created: %s", "$BIN_PATH")"
	echo "$BIN_PATH"
}

_self_build() { local USING="$1" RESULT_PATH="$2"; shift 2
	local ARGS=("$@" -rebuild -json)
	if is_debug; then
		ARGS+=(-debug)
	elif is_verbose; then
		ARGS+=(-v)
	else
		ARGS+=(-q)
	fi
	TARGET_DIR="$(dirname "$BIN_PATH")"
	BIN_NAME="$(basename "$BIN_PATH")"
	export TARGET_DIR BIN_NAME
	run "$USING" build "${ARGS[@]}" > "$RESULT_PATH"
}

_go_build() { PACKAGE="${1:-.}"
	GOOS="$OS" GOARCH="$ARCH" run go build -o "$BIN_PATH" "$PACKAGE"
}

# tmpdir creates a temp directory and prints its path.
tmpdir() { local D="$TMP_ROOT/$1" && mkdir -p "$D" && echo "$D"; }

tmpfile() { local D R F
	D="$(dirname "$1")"
	R="$(tmpdir "$D")"
	F="$R/$(basename "$1")"
	rm -rf "$F"
	echo "$F"
}

get_bin_path() { local KIND="$1" PLATFORM="$2"
	[[ -z "${BIN_PATH:-}" ]] || { echo "$BIN_PATH" && return 0; }
	[[ -z "${TARGET_DIR:-}" ]] || { echo "$TARGET_DIR/$BIN_NAME" && return 0; }
	tmpfile "$KIND/$PLATFORM/dist/$BIN_NAME"
}

is_supported_platform() { local P="$1"
	for S in "${SUPPORTED_PLATFORMS[@]}"; do
		[[ "$S" != "$P" ]] || return 0
	done
	return 1
}

assert_supported_platform() { local P="$1"
	is_supported_platform "$P" || \
		die "Platform '%s' not supported. Pick from: %s" "$P" "${SUPPORTED_PLATFORMS[*]}"
}

sha() { sha256sum < "$1" | cut -d' ' -f1; }
