#!/usr/bin/env bash

# shellcheck disable=SC2030,SC2031 # We modify exported vars in subshells on purpose in this script.

# build
#
# This script encodes building a releasable actions-go-build CLI.
#
# Relased versions of actions-go-build are always built using themselves.
# The build happens in four stages:
#
# 1. Initial - this build is created using a standard 'go build' invocation.
# 2. Intermediate - built using the initial build. It contains its own version metadata.
# 3. Bootstrapped - built using the intermediate build. It additionally contains version metadata
#    about the version of actions-go-build that built it, just like product binaries are able to.
# 4. Final - this build happens using the fully bootstrapped build. Final builds can be for any
#    platform, whereas all initial, intermediate, and bootstrapped builds are always for the
#    host platform.

# Enable "safe mode"
set -Eeuo pipefail

# Logging functions.
# shellcheck disable=SC2059
log() { local F="$1"; shift; printf "$F\n" "$@" 1>&2; }
die() { local F="FATAL: ${1:-$_emptylog}"; shift; log "$F" "$@"; exit 1; }
err() { local F="ERROR: ${1:-$_emptylog}"; shift; log	"$F" "$@"; echo 1; return 1; }
enabled() { [[ "${!1:-,,}" =~ (1|y|yes|true|enabled) ]]; }
is_debug() { enabled DEBUG; }
is_verbose() { enabled VERBOSE || enabled DEBUG; }
debug()   { is_debug   || return 0; local F="DEBUG: $1"; shift; log "$F" "$@"; }
verbose() { is_verbose || return 0; local F="INFO: $1"; shift; log "$F" "$@"; }
run() {
	# shellcheck disable=SC2001 # using sed not bash find/replace.
	if is_verbose; then
		log "\$ $(sed "s,$TMP_ROOT,\$TMP_ROOT,g" <<< "$*")"
	fi
	/usr/bin/env "$@"
}

# Header that enables you to run specific functions in this file.
#
# Set exit trap if this file was directly invoked rather than sourced.
# https://stackoverflow.com/questions/2683279/how-to-detect-if-a-script-is-being-sourced
(return 0 2>/dev/null) || trap 'Makefile.funcs.main "$@"' EXIT
Makefile.funcs.func_exists() { declare -F | cut -d' ' -f3 | grep -qE "^$1\$"; }
Makefile.funcs.main() {
	local CODE=$?; trap - EXIT
	[[ $CODE == 0 ]] || die "Script exited with code $CODE before main func could run."
	[[ ${#@} != 0 ]] || {
		Makefile.funcs.func_exists default || die "No arguments passed and no default function."
		default "$@"; return
	}
	local FUNC="$1"; shift
	Makefile.funcs.func_exists "$FUNC" || die "Function '%s' not defined." "$FUNC"
	rm -rf "${TMP_ROOT:?}"
	"$FUNC" "$@"	
}

#
# End Header

# Define constants.

BIN_NAME=actions-go-build

TMP_ROOT="${TMP_ROOT:-$TMPDIR/$BIN_NAME/build}"

SUPPORTED_PLATFORMS=(
	linux/amd64
	linux/arm64
	darwin/amd64
	darwin/arm64
)

#
# Define defaults for this system.
#

HOST_PLATFORM="$(go env GOHOSTOS)/$(go env GOHOSTARCH)"

#
# Define top-level functions.
#

# the default function is what's called when the script is invoked with no args.
default() { from_scratch "$@"; }

# list supported platforms
platforms() {
	for P in "${SUPPORTED_PLATFORMS[@]}"; do echo "$P"; done
}

all_from_scratch() {
	export FINAL_HOST_RESULT RESULT
	BOOTSTRAPPED="$(bootstrap_default_path)" || return 1
	log "==> Building final distribution binaries..."
	for P in "${SUPPORTED_PLATFORMS[@]}"; do
		FINAL="$(final "$BOOTSTRAPPED" "$P")"
	done
}

# from_scratch performs a complete build:
#
#   source code -> bootstrap -> intermediate -> final -> verification
#
from_scratch() ( local PLATFORM="${1:-$HOST_PLATFORM}"
	export FINAL_HOST_RESULT RESULT
	RESULT="$(tmpfile "final/$PLATFORM/result.json")"
	BOOTSTRAPPED="$(bootstrap_default_path)" || return 1
	if [[ "$PLATFORM" == "$HOST_PLATFORM" ]]; then
		log "==> Target platform is the same as host platform, all done."
		FINAL="$BOOTSTRAPPED"
	else
		log "==> Building for target plaform: $PLATFORM"
		FINAL="$(final "$BOOTSTRAPPED" "$PLATFORM" "$RESULT")" || return 1
	fi

	log "Success; binary written to $FINAL"
)

# bootstrap produces a bootstrapped build from source for the host platform, ready to build
# actions-go-build binaries for all the other platforms.
bootstrap() ( export BIN_PATH="${1:-}"
	log "==> Building local bootstrap build chain for host platform: $HOST_PLATFORM"
	# Always use default target paths for the intial and intermediate builds.
	INTERMEDIATE="$(
		set -Eeuo pipefail
		export BIN_PATH="" TARGET_DIR="" PLATFORM="$HOST_PLATFORM"
		INITIAL="$(initial)"
		INTERMEDIATE="$(intermediate "$INITIAL")"
		verify "$INTERMEDIATE" > /dev/null || exit 1
		echo "$INTERMEDIATE"
	)"
	FINAL_HOST_RESULT="$(tmpfile "final/$HOST_PLATFORM/result.json")"
	FINAL_HOST="$(bootstrapped "$INTERMEDIATE" "$HOST_PLATFORM" "$FINAL_HOST_RESULT")" || exit 1
	# Verify the final build for the host platform.
	# Print the path to the bootstrapped binary...
	echo "$FINAL_HOST"
)

bootstrap_default_path() {
	bootstrap "$(get_default_bin_path bootstrap "$HOST_PLATFORM")"
}

# initial produces an initial build using just 'go build'.
initial() {
	_build initial "$HOST_PLATFORM" _go_build
}

# intermediate produces an intermediate build given a bootstrap build.
intermediate() { local INITIAL="$1" RESULT="${2:-/dev/null}"
	_build intermediate "$HOST_PLATFORM" _self_build "$INITIAL" build "$RESULT"
}

# bootstrapped produces the bootstrapped build given an intermediate build.
bootstrapped() ( local INTERMEDIATE="$1" PLATFORM="${2:-$HOST_PLATFORM}" RESULT="${3:-/dev/null}"	
	export TARGET_DIR="${TARGET_DIR:-dist/$PLATFORM}"
	export BIN_PATH="${BIN_PATH:-}"
	_build bootstrapped "$PLATFORM" _self_build "$INTERMEDIATE" build "$RESULT"
)

# final produces a final build given a bootstraped build.
final() ( local BOOTSTRAPPED="$1" PLATFORM="${2:-$HOST_PLATFORM}" RESULT="${3:-/dev/null}"	
	export TARGET_DIR="${TARGET_DIR:-dist/$PLATFORM}"
	export BIN_PATH="${BIN_PATH:-}"
	_build final "$PLATFORM" _self_build "$BOOTSTRAPPED" build "$RESULT"
)

# dev produces a final dev build given a bootstraped build.
dev() ( local BOOTSTRAPPED="$1" PLATFORM="${2:-$HOST_PLATFORM}" RESULT="${3:-/dev/null}"
	final "$@"
)

# release produces a final release build given a bootstrapped build.
# The difference from dev is that final fails if the worktree is not clean.
release() ( local BOOTSTRAPPED="$1" PLATFORM="${2:-$HOST_PLATFORM}" RESULT="${3:-/dev/null}"
	export REQUIRE_CLEAN_WORKTREE=true
	final "$@"
)

verify() { local FINAL="$1" RESULT_OUT="${2:-/dev/null}"
	_build verification "$HOST_PLATFORM" _self_build "$FINAL" verify "$RESULT_OUT"
}

verify_remote() { local FINAL="$1" RESULT_IN="$2" RESULT_OUT="${3:-/dev/null}"
	_build verification "$HOST_PLATFORM" _self_build "$FINAL" verify "$RESULT_OUT" "$RESULT_IN"
}

#
# Define utility functions.
#

# _build performs a build and outputs the absolute path to the built binary.
_build() { local TYPE="$1" PLATFORM="$2"; shift 2
	verbose "TMP_ROOT=$TMP_ROOT"
	assert_supported_platform "$PLATFORM"
	OS="$(cut -d'/' -f1 <<< "$PLATFORM")" || return 1
	ARCH="$(cut -d'/' -f2 <<< "$PLATFORM")" || return 1
	if [[ -z "${BIN_PATH:-}" ]]; then
		BIN_PATH="$(get_bin_path "$TYPE" "$PLATFORM")" || return 1
	fi
	export BIN_PATH TARGET_DIR
	log "Building %s %s/%s binary..." "$TYPE" "$OS" "$ARCH"
	OS="$OS" ARCH="$ARCH" BIN_PATH="$BIN_PATH" "$@" 1>&2 || return 1
	echo "$BIN_PATH"
}

# _self_build performs a build of actions-go-build using actions-go-build.
# USING is the path to the actions-go-build binary to use for this build.
_self_build() { local USING="$1" SUBCOMMAND="$2" RESULT_PATH="${3:-/dev/null}"; shift 3
	if [[ -z "$USING" ]]; then
		return "$(err "USING is empty")"
	fi
	# if USING is a relative path, make it invokable by prefixing with ./
	if [[ "${USING:0:1}" != / ]]; then
		USING="./$USING"
	fi
	local FLAGS=(-rebuild -json)
	if ${REQUIRE_CLEAN_WORKTREE:-false}; then
		FLAGS+=(-clean)
	fi
	if is_debug; then
		FLAGS+=(-debug)
	elif is_verbose; then
		FLAGS+=(-v)
	else
		FLAGS+=(-q)
	fi
	TARGET_DIR="$(dirname "$BIN_PATH")"
	BIN_NAME="$(basename "$BIN_PATH")"
	export TARGET_DIR BIN_NAME
	run "$USING" "$SUBCOMMAND" "${FLAGS[@]}" "$@" > "$RESULT_PATH"
}

_go_build() { PACKAGE="${1:-.}"
	GOOS="$OS" GOARCH="$ARCH" run go build -o "$BIN_PATH" "$PACKAGE"
}

# tmpdir creates a temp directory and prints its path.
tmpdir() { local D="$TMP_ROOT/$1" && mkdir -p "$D" && echo "$D"; }

tmpfile() { local D R F
	D="$(dirname "$1")"
	R="$(tmpdir "$D")"
	F="$R/$(basename "$1")"
	rm -rf "$F"
	echo "$F"
}

get_default_bin_path() { local KIND="$1" PLATFORM="${2:-$HOST_PLATFORM}"
	tmpfile "$KIND/$PLATFORM/dist/$BIN_NAME"
}

get_bin_path() { local KIND="$1" PLATFORM="$2"
	[[ -z "${BIN_PATH:-}" ]] || { echo "$BIN_PATH" && return 0; }
	[[ -z "${TARGET_DIR:-}" ]] || { echo "$TARGET_DIR/$BIN_NAME" && return 0; }
	get_default_bin_path "$KIND" "$PLATFORM"
}

is_supported_platform() { local P="$1"
	for S in "${SUPPORTED_PLATFORMS[@]}"; do
		[[ "$S" != "$P" ]] || return 0
	done
	return 1
}

assert_supported_platform() { local P="$1"
	is_supported_platform "$P" || \
		die "Platform '%s' not supported. Pick from: %s" "$P" "${SUPPORTED_PLATFORMS[*]}"
}
