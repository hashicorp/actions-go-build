name: Go Build
author: Release Engineering <team-rel-eng@hashicorp.com>
description: Define a reproducible build. Currently only supports Go builds.

inputs:

  product_name:
    description: >
      Used to calculate default `bin_name` and `zip_name`.
      Defaults to repository name.
    required: false

  product_version:
    description: >
      Full version of the product being built (including metadata).
    required: false

  product_version_meta:
    description: >
      The metadata field of the version.
    required: false

  go_version:
    description: Version of Go to use for this build.
    required: true

  os:
    description: >
      Target product operating system.
    required: true

  arch:
    description: >
      Target product architecture.
    required: true

  reproducible:
    description: >
      Assert that this build is reproducible.
      Options are `assert` (the default), `report`, or `nope`.
    required: false
    default: assert

  bin_name:
    description: >
      Name of the product binary generated.
      Defaults to `product_name` minus any `-enterprise` suffix.
    required: false

  zip_name:
    description: >
      Name of the product zip file.
      Defaults to `<product_name>_<product_version>_<os>_<arch>.zip`.
    required: false

  work_dir:
    description: >
      The working directory, to run the instructions in.
      Defaults to the current directory.
    required: false
    default: .

  instructions:
    description: >
      Build instructions to generate the binary.
      See [Build Instructions](#build-instructions) for more info.
    required: true

  debug:
    description: >
      Enable debug-level logging.
    required: false
    default: 0

runs:
  using: composite
  steps:

    # Setup Go for CLI compilation.
    - uses: actions/setup-go@v2
      with:
        go-version: 1.18

    - name: Set some needed environment variables.
      shell: bash
      run: |
        # Set environment.
        {
          echo "TMPDIR=$RUNNER_TEMP"
          echo "RUN=${{ github.action_path }}/scripts/gha run"
          echo "RUN_CLI=env DEBUG=true ${{ github.action_path }}/scripts/gha run actions-go-build"
        } >> "$GITHUB_ENV"

    # Compile the CLI inline. We should work to remove this step by using
    # precompiled binaries for tagged versions (maybe stored as release
    # assets).
    - name: Install the CLI
      shell: bash
      working-directory: ${{ github.action_path }}
      env:
        ACTION_REPO: https://github.com/hashicorp/actions-go-build
        ACTION_REF: ${{ github.action_ref }}
        ACTION_PATH: ${{ github.action_path }}
      run: |
        # Install the CLI
        # Make sure we have the git repo cloned.
        cd ..
        ACTION_PATH="${ACTION_PATH%/./}"
        [[ -n "$ACTION_REF" ]] || ACTION_REF="${{ github.sha }}"
        rm -rf "$ACTION_PATH"
        git clone "$ACTION_REPO" "$ACTION_PATH"
        git reset --hard "$ACTION_REF"
        $RUN make install

    # Read config.
    - name: Read config from inputs; export to GITHUB_ENV
      shell: bash
      working-directory: ${{ inputs.work_dir }}
      run: $RUN_CLI config -github
      env:
        PRODUCT_NAME: ${{ inputs.product_name }}
        PRODUCT_VERSION: ${{ inputs.product_version }}
        PRODUCT_VERSION_META: ${{ inputs.product_version_meta }}
        OS: ${{ inputs.os }}
        ARCH: ${{ inputs.arch }}
        REPRODUCIBLE: ${{ inputs.reproducible }}
        BIN_NAME: ${{ inputs.bin_name }}
        ZIP_NAME: ${{ inputs.zip_name }}
        INSTRUCTIONS: ${{ inputs.instructions }}
        DEBUG: ${{ inputs.debug }}

    # Setup Go
    - uses: actions/setup-go@v2
      with:
        go-version: ${{ inputs.go_version }}

    # Primary Build
    - name: Run Primary Build
      shell: bash
      working-directory: ${{ inputs.work_dir }}
      run: $RUN_CLI build

    # Upload Primary Build
    - name: Upload Primary Zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.ZIP_NAME }}
        path: ${{ env.ZIP_PATH_PRIMARY }}
        if-no-files-found: error

    # Local Verification Build
    - name: Run Local Verification Build
      if: inputs.reproducible == 'assert' || inputs.reproducible == 'report'
      shell: bash
      working-directory: ${{ inputs.work_dir }}
      run: $RUN_CLI build -verification

    # Upload Local Verification Build
    - name: Upload Local Verification Zip
      if: inputs.reproducible == 'assert' || inputs.reproducible == 'report'
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.ZIP_NAME }}.local-verification-build.zip
        path: ${{ env.ZIP_PATH_VERIFICATION }}
        if-no-files-found: error

    # Assert Reproducibility
    - name: Assert Build Outputs Identical
      if: inputs.reproducible == 'assert'
      shell: bash
      working-directory: ${{ inputs.work_dir }}
      run: |
        # Verify
        mkdir -p "$(dirname "$VERIFICATION_RESULT")"
        $RUN_CLI verify \
          -verification-build-result "$VERIFICATION_BUILD_RESULT" \
          -json | tee > "$VERIFICATION_RESULT"

    # Report Reproducibility
    - name: Report Reproducibility Results
      if: inputs.reproducible == 'report'
      shell: bash
      working-directory: ${{ inputs.work_dir }}
      run: |
        # Verify
        mkdir -p "$(dirname "$VERIFICATION_RESULT")"
        $RUN_CLI verify \
          -verification-build-result "$VERIFICATION_BUILD_RESULT" \
          -json | tee > "$VERIFICATION_RESULT" || true

    # Upload Verification Result
    - name: Upload Verification Result
      if: inputs.reproducible == 'assert' || inputs.reproducible == 'report'
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.ZIP_NAME }}.verificationresult.json
        path: ${{ env.VERIFICATION_RESULT }}
        if-no-files-found: error
