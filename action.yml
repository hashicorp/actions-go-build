name: Reproducible Build
author: Release Engineering <team-rel-eng@hashicorp.com>
description: Define a reproducible build. Currently only supports Go builds.

inputs:
  instructions:
    description: >
      Build instructions to generate the product binary at $BIN_PATH;
      See the docs for more info.

    required: true

  go_version:
    description: Version of Go to use for this build.
    required: true

  product_version:
    description: >
      Version of the product being built.
      Exported as PRODUCT_VERSION.
    required: true

  os:
    description: >
      Target product operating system.
      Exported as OS and GOOS.
    required: true

  arch:
    description: >
      Target product architecture.
      Exported as ARCH and GOARCH.
    required: true

  package_name:
    description: >
      Name of the package to build. Used to calculate default bin_name and zip_name.
      Exported as PACKAGE_NAME.
    required: true

  bin_name:
    description: >
      Name of the product binary generated by instructions.
      Defaults to package_name minus any '-enterprise' suffix.
      Exported as BIN_NAME.
    required: false

  zip_name:
    description: >
      Name of the product zip file.
      Defaults to '${PACKAGE_NAME}_${PRODUCT_VERSION}_${OS}_${ARCH}.zip'.
      Exported as ZIP_NAME.
    required: false

runs:
  using: composite
  steps:
    # We need the GNU date program installed that comes with coreutils.
    - name: Ensure Coreutils Installed On Mac
      if: runner.os == 'macOS'
      shell: bash
      run: |
        set -euo pipefail
        command -v brew > /dev/null 2>&1 || {
          echo "Homebrew not installed, unable to proceed."
          exit 1
        }
        brew update
        brew install coreutils
    - name: Calculate default values and paths; set env vars.
      shell: bash
      env:
        INSTRUCTIONS: ${{ inputs.instructions }}
        OS: ${{ inputs.os }}
        ARCH: ${{ inputs.arch }}
        PRODUCT_VERSION: ${{ inputs.product_version }}
        BIN_NAME: ${{ inputs.bin_name }}
        ZIP_NAME: ${{ inputs.zip_name }}
        PACKAGE_NAME: ${{ inputs.package_name }}
      run: ${{ github.action_path }}/scripts/digest_inputs
    - uses: actions/setup-go@v2
      with:
        go-version: ${{ inputs.go_version }}

    - name: Run Primary Build
      shell: bash
      run: ${{ github.action_path }}/scripts/primary_build
    - name: Upload primary build zip file.
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.ZIP_NAME }}
        path: ${{ env.ZIP_PATH_PRIMARY }}
        if-no-files-found: error

    - name: Run Local Verification Build
      shell: bash
      # Sleep 2 seconds to make sure we get different mtimes.
      # For fast builds this is necessary.
      run: sleep 2; ${{ github.action_path }}/scripts/local_verification_build
    - name: Upload local verification build zip file.
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.ZIP_NAME }}.local-verification-build.zip
        path: ${{ env.ZIP_PATH_VERIFICATION }}
        if-no-files-found: error

    - name: Compare Build Outputs
      shell: bash
      run: ${{ github.action_path }}/scripts/compare_digests
