name: Go Build
author: Release Engineering <team-rel-eng@hashicorp.com>
description: Define a reproducible build. Currently only supports Go builds.

inputs:

  product_name:
    description: >
      Used to calculate default `bin_name` and `zip_name`.
      Defaults to repository name.
    required: false

  product_version:
    description: >
      Full version of the product being built (including metadata).
    required: false

  product_version_meta:
    description: >
      The metadata field of the version.
    required: false

  go_version:
    description: Version of Go to use for this build.
    required: true

  os:
    description: >
      Target product operating system.
    required: true

  arch:
    description: >
      Target product architecture.
    required: true

  reproducible:
    description: >
      Assert that this build is reproducible.
      Options are `assert` (the default), `report`, or `nope`.
    required: false
    default: assert

  bin_name:
    description: >
      Name of the product binary generated.
      Defaults to `product_name` minus any `-enterprise` suffix.
    required: false

  zip_name:
    description: >
      Name of the product zip file.
      Defaults to `<product_name>_<product_version>_<os>_<arch>.zip`.
    required: false

  work_dir:
    description: >
      The working directory, to run the instructions in.
      Defaults to the current directory.
    required: false
    default: .

  instructions:
    description: >
      Build instructions to generate the binary.
      See [Build Instructions](#build-instructions) for more info.
    required: true

runs:
  using: composite
  steps:

    # We need the GNU date program installed that comes with coreutils.
    - name: Ensure Coreutils Installed On Mac
      if: runner.os == 'macOS'
      shell: bash
      run: |
        set -euo pipefail
        if (date --help | grep GNU) > /dev/null 2>&1; then
          echo "GNU date already installed as 'date'"
          exit 0
        fi
        if (gdate --help | grep GNU) > /dev/null 2>&1; then
          echo "GNU date already installed as 'gdate'"
          exit 0
        fi
        command -v brew > /dev/null 2>&1 || {
          echo "Homebrew not installed, unable to proceed."
          exit 1
        }
        brew update
        brew install coreutils

    # Setup Go for CLI compilation.
    - uses: actions/setup-go@v2
      with:
        go-version: 1.18

    # Compile the CLI inline. We should work to remove this step by using
    # precompiled binaries for tagged versions (maybe stored as release
    # assets).
    - name: Install the CLI
      shell: bash
      working-directory: ${{ github.action_path }}
      run: make install

    # Read config and
    - name: Read config from inputs; export to GITHUB_ENV
      shell: bash
      run: actions-go-build config -github
      env:
        PRODUCT_NAME: ${{ inputs.product_name }}
        PRODUCT_VERSION: ${{ inputs.product_version }}
        PRODUCT_VERSION_META: ${{ inputs.product_version_meta }}
        OS: ${{ inputs.os }}
        ARCH: ${{ inputs.arch }}
        REPRODUCIBLE: ${{ inputs.reproducible }}
        BIN_NAME: ${{ inputs.bin_name }}
        ZIP_NAME: ${{ inputs.zip_name }}
        INSTRUCTIONS: ${{ inputs.instructions }}

    # Setup Go
    - uses: actions/setup-go@v2
      with:
        go-version: ${{ inputs.go_version }}

    # Print
    - name: "Print Build Environment Info"
      shell: bash
      run: ${{ github.action_path}}/scripts/build_env_info

    # Primary Build
    - name: Run Primary Build
      shell: bash
      run: cd ${{ inputs.work_dir }} && actions-go-build primary

    # Upload Primary Build
    - name: Upload primary build zip file.
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.ZIP_NAME }}
        path: ${{ env.ZIP_PATH_PRIMARY }}
        if-no-files-found: error

    # Local Verification Build
    - name: Run Local Verification Build
      if: inputs.reproducible == 'assert' || inputs.reproducible == 'report'
      shell: bash
      run: cd ${{ inputs.work_dir }} && actions-go-build verification

    # Upload Local Verification Build
    - name: Upload local verification build zip file.
      if: inputs.reproducible == 'assert' || inputs.reproducible == 'report'
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.ZIP_NAME }}.local-verification-build.zip
        path: ${{ env.ZIP_PATH_VERIFICATION }}
        if-no-files-found: error

    # Assert Reproducibility
    - name: Assert Build Outputs Identical
      if: inputs.reproducible == 'assert'
      shell: bash
      run: actions-go-build compare

    # Report Reproducibility
    - name: Report Reproducibility Results
      if: inputs.reproducible == 'report'
      shell: bash
      run: ${{ github.action_path }}/scripts/compare_digests || true
