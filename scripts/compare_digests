#!/usr/bin/env bash

# shellcheck disable=SC2207 # I want BIN_RESULTS and ZIP_RESULTS to word-split into arrays.

# shellcheck source=scripts/standard_header.bash
source "${BASH_SOURCE%/*}/standard_header.bash"

# shellcheck source=scripts/digest_tools.bash
source "${BASH_SOURCE%/*}/digest_tools.bash"

log_bold "Comparing SHA256 digests between primary and local verification builds."
log      "Primary build root:            $PRIMARY_BUILD_ROOT"
log      "Local verification build root: $VERIFICATION_BUILD_ROOT"

PASSED=true
BIN_PASSED=true
ZIP_PASSED=true

BIN_RESULTS=($(compare_digest "bin")) || { PASSED=false; BIN_PASSED=false; }
ZIP_RESULTS=($(compare_digest "zip")) || { PASSED=false; ZIP_PASSED=false; }

# Execute 'true' or 'false' on exit to set the correct exit code.
trap '$PASSED' EXIT

write_summary() { echo "$*" >> "${GITHUB_STEP_SUMMARY}"; }

emoji_for_passed() { "$1" && echo ":white_check_mark:" || echo ":x:"; }

print_results() {
	local NAME="$1"; shift
	local PASSED="$1"; shift
	local RESULTS=("$@")
	if $PASSED; then
		write_summary "$(emoji_for_passed "$PASSED") $NAME SHA256 sums match."
	else
		write_summary "$(emoji_for_passed "$PASSED") $NAME SHA256 sums do not match."
	fi
	local PRIMARY="${RESULTS[0]}"
	local VERIFICATION="${RESULTS[1]:-$PRIMARY}"
	write_summary "|          $NAME           |     SHA256    |"
	write_summary "|--------------------------|---------------|"
	write_summary "| Primary build            | $PRIMARY      |"
	write_summary "| Local verification build | $VERIFICATION |"
	write_summary "-----"
}

BUILD_NAME="$PRODUCT_NAME v$PRODUCT_VERSION $OS/$ARCH"

if $PASSED; then
	write_summary "### $(emoji_for_passed "$PASSED") Build of $BUILD_NAME correctly reproduced in local environment."
else
	write_summary "### $(emoji_for_passed "$PASSED") Build of $BUILD_NAME did not correctly reproduce in local environment"
fi

write_summary "-----"

print_results "Binary" $BIN_PASSED "${BIN_RESULTS[@]}"
print_results "Zip"    $ZIP_PASSED "${ZIP_RESULTS[@]}"

# A failed bin implies a failed zip, so just give up if that's the case.
if ! "$BIN_PASSED"; then
	exit
fi

# If the zip passed, we're all done.
if "$ZIP_PASSED"; then
	exit
fi

# The zip didn't reproduce but the bin did, so dump some info here to help with debugging.

# dump_zipinfo dumps zip info to stderr and a file. It writes the name
# of the file written to stdout.
dump_zipinfo() {
	local ZIP="$1"
	local FILE="$ZIP.info"
	log "$(bold "zip info for $ZIP")"
	# The tail -n+2 bits here just knock off the first line of output,
	# which is always different as it's the zip's filename.
	zipinfo -v "$ZIP" | tail -n+2 | tee "$FILE" 1>&2
	echo "$FILE"
}

log_bold "SEE ZIP INFO BELOW TO AID WITH DEBUGGING THE ZIP REPRODUCIBILITY FAILURE"

PRIMARY_INFO="$(dump_zipinfo "$ZIP_PATH_PRIMARY")"
VERIFICATION_INFO="$(dump_zipinfo "$ZIP_PATH_VERIFICATION")"

log "$(bold "Diff between above two zipinfo outputs:")"
diff -U 40 "$PRIMARY_INFO" "$VERIFICATION_INFO"

log "$(bold "Binary file details:")"
stat "$BIN_PATH_PRIMARY"
stat "$BIN_PATH_VERIFICATION"
