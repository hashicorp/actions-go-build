#!/usr/bin/env bash

# This script formats the inputs declaration from the action.yml
# into a markdown table.

set -Eeuo pipefail

read_output_to_array() {
	local NAME="$1"; shift
	IFS=$'\n' read -r -d '' -a "$NAME" < <("$@" && printf '\0')
}

list_input_names() {
	yq -r '.inputs | keys_unsorted[]' < action.yml
}

declare -a NAMES
read_output_to_array NAMES list_input_names

HEADERS=("Name" "Description")

write_header() {
	write_row "${HEADERS[@]}"
	for _ in "${HEADERS[@]}"; do
		printf "| ----- "
	done
	printf "|\n"
}

write_row() {
	for V in "$@"; do
		printf "| %s " "$V"
	done
	printf "|\n"
}

input_name_field() {
	local NAME="$1"
	local REQUIRED="$2"
	if "$REQUIRED"; then
		echo "**\`$NAME\`** _(required)_"
	else
		echo "\`$NAME\` _(optional)_"
	fi
}

write_input_row() {
	local INPUT_NAME="$1"
	local FIELDS=()
	local REQUIRED
	REQUIRED="$(read_input_field "$INPUT_NAME" required)"
	FIELDS=(
		"$(input_name_field "$INPUT_NAME" "$REQUIRED")"
		"$(read_input_field "$INPUT_NAME" description)"
	)
	write_row "${FIELDS[@]}"
}

read_input_field() {
	local INPUT_NAME="$1"
	local FIELD="$2"
	yq -r ".inputs.$INPUT_NAME.$FIELD" < action.yml
}

write_input_rows() {
	for NAME in "${NAMES[@]}"; do
		write_input_row "$NAME"
	done
}

column() {
	if [ "$(uname)" = "Darwin" ]; then 
		/usr/local/opt/util-linux/bin/column "$@" || {
			echo "Missing dependency; please install util-linux, e.g.: 'brew install util-linux'"
			return 1
		}
		return
	fi
	column "$@"
}

markdown_table_rows() {
	column -ts '|' -o ' | ' | sed -E -e 's/^ //g' -e 's/ $//g'
}

markdown_table() {
	HEADER_FUNC="$1"
	BODY_FUNC="$2"
	{ "$HEADER_FUNC"; "$BODY_FUNC"; } | markdown_table_rows
}

markdown_table write_header write_input_rows
